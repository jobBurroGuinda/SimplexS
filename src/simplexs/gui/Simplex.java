
package simplexs.gui;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import simplexs.logica.MsSimplexMin;
import simplexs.logica.SimplexMax;
import simplexs.logica.SimplexMin;

public class Simplex extends javax.swing.JFrame {

    
    private float x11=0;
    private float x12=0;
    private float x13=0;
    private float x21=0;
    private float x22=0;
    private float x23=0;
    
    private float zx1=0;
    private float zx2=0;
    private float zs1=0;
    private float zs2=0;
    private float zs3=0;
    
    
    private float c1=0;
    private float c2=0;
    private float c3=0;
    private float zConst=0;
    
    private float s11 = 1;
    private float s12 = 0;
    private float s13 = 0;
    private float s21 = 0;
    private float s22 = 1;
    private float s23 = 0;
    private float s31 = 0;
    private float s32 = 0;
    private float s33 = 1;
        
    private float pivote = 0;
    private double pm1 = 0.0;
    private double pm2 = 0.0;
    
    private String text = "";
    
    int filas, columnas;
    private float[][] matriz;
    MsSimplexMin[] ms;
    
    
    /**
     * Creates new form Simplex
     */
    public Simplex() {
        initComponents();
        //setDataMatriz();
        setTitle("Arantxa Fuensanta Arana Torres, Axel Sayan Villagrana Carrillo, Ramón Emmanuel García Murillo, Job Adolfo Salinas Hernández");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cx30 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cx31 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cx00 = new javax.swing.JTextField();
        cx10 = new javax.swing.JTextField();
        cx21 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cx01 = new javax.swing.JTextField();
        cx11 = new javax.swing.JTextField();
        cx20 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cx05 = new javax.swing.JTextField();
        cx15 = new javax.swing.JTextField();
        cx25 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnMinimizacion = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        btnMaximizacion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Optimización");

        jLabel2.setText("Z = ");

        cx30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cx30ActionPerformed(evt);
            }
        });
        cx30.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx30KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx30KeyTyped(evt);
            }
        });

        jLabel3.setText("x1+");

        cx31.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx31KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx31KeyTyped(evt);
            }
        });

        jLabel4.setText("x2");

        cx00.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx00KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx00KeyTyped(evt);
            }
        });

        cx10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx10KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx10KeyTyped(evt);
            }
        });

        cx21.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx21KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx21KeyTyped(evt);
            }
        });

        jLabel5.setText("x1       +");

        jLabel6.setText("x2   ");

        jLabel7.setText("x1       +");

        cx01.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx01KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx01KeyTyped(evt);
            }
        });

        cx11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cx11ActionPerformed(evt);
            }
        });
        cx11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx11KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx11KeyTyped(evt);
            }
        });

        cx20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cx20ActionPerformed(evt);
            }
        });
        cx20.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx20KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx20KeyTyped(evt);
            }
        });

        jLabel8.setText("x2   ");

        jLabel9.setText("x1       +");

        jLabel10.setText("x2   ");

        jLabel14.setText("=");

        jLabel15.setText("=");

        jLabel16.setText("=");

        cx05.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx05KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx05KeyTyped(evt);
            }
        });

        cx15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx15KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx15KeyTyped(evt);
            }
        });

        cx25.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cx25KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cx25KeyTyped(evt);
            }
        });

        jLabel11.setText("x1, x2  >=  0");

        btnMinimizacion.setText("Minimización");
        btnMinimizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizacionActionPerformed(evt);
            }
        });

        area.setEditable(false);
        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        btnMaximizacion.setText("Maximización");
        btnMaximizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaximizacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(cx30, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cx31, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(btnMinimizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnMaximizacion))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                                    .addComponent(cx10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addComponent(jLabel9)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                    .addComponent(cx20, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addComponent(jLabel7)
                                                                    .addGap(35, 35, 35)))
                                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                                    .addComponent(cx21, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addComponent(jLabel10))
                                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                                    .addComponent(cx11, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                    .addComponent(jLabel6))))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addComponent(cx00, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel5)
                                                            .addGap(35, 35, 35)
                                                            .addComponent(cx01, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel8)))
                                                    .addGap(8, 8, 8)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                                                    .addGap(18, 18, 18)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cx25, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cx15, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cx05, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cx30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cx31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cx00, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cx01, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel8)
                                        .addComponent(cx05, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel14)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cx10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cx11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(cx15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jLabel15)))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(cx21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)
                                .addComponent(cx25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addComponent(cx20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(btnMinimizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMaximizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(193, 193, 193)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 81, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cx30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cx30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cx30ActionPerformed

    private void cx30KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx30KeyReleased
        zx1 = Float.parseFloat(cx30.getText())*-1;
        area.setText("");
    }//GEN-LAST:event_cx30KeyReleased

    private void cx30KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx30KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx30.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx30KeyTyped

    private void cx31KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx31KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx31.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx31KeyTyped

    private void cx00KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx00KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx00.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx00KeyTyped

    private void cx10KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx10KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx10.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx10KeyTyped

    private void cx20KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx20KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx20.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx20KeyTyped

    private void cx01KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx01KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx01.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx01KeyTyped

    private void cx11KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx11KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx11.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx11KeyTyped

    private void cx21KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx21KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // Se acepta que el usuario introduzca un punto pero sólo uno
        if(c=='.' & cx21.getText().contains(".") & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx21KeyTyped

    private void cx05KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx05KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx05KeyTyped

    private void cx15KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx15KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx15KeyTyped

    private void cx25KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx25KeyTyped
        // Si el usuario introduce un valor que no sea decimal..
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) & c!='.' & (c != KeyEvent.VK_BACK_SPACE)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Sólo se pueden ingresar números decimales en este campo", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cx25KeyTyped

    private void cx31KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx31KeyReleased
        zx2 = Float.parseFloat(cx31.getText())*-1;
        area.setText("");
    }//GEN-LAST:event_cx31KeyReleased

    private void cx00KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx00KeyReleased
        x11 = Float.parseFloat(cx00.getText());
        area.setText("");
    }//GEN-LAST:event_cx00KeyReleased

    private void cx10KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx10KeyReleased
        x12 = Float.parseFloat(cx10.getText());
        area.setText("");
    }//GEN-LAST:event_cx10KeyReleased

    private void cx20KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx20KeyReleased
        x13 = Float.parseFloat(cx20.getText());
        area.setText("");
    }//GEN-LAST:event_cx20KeyReleased

    private void cx01KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx01KeyReleased
        x21 = Float.parseFloat(cx01.getText());
        area.setText("");
    }//GEN-LAST:event_cx01KeyReleased

    private void cx11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx11KeyReleased
        x22 = Float.parseFloat(cx11.getText());
        area.setText("");
    }//GEN-LAST:event_cx11KeyReleased

    private void cx21KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx21KeyReleased
        x23 = Float.parseFloat(cx21.getText());
        area.setText("");
    }//GEN-LAST:event_cx21KeyReleased

    private void cx05KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx05KeyReleased
        c1 = Float.parseFloat(cx05.getText());
        area.setText("");
    }//GEN-LAST:event_cx05KeyReleased

    private void cx15KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx15KeyReleased
        c2 = Float.parseFloat(cx15.getText());
        area.setText("");
    }//GEN-LAST:event_cx15KeyReleased

    private void cx25KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cx25KeyReleased
        c3 = Float.parseFloat(cx25.getText());
        area.setText("");
    }//GEN-LAST:event_cx25KeyReleased

    private void btnMinimizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizacionActionPerformed
        
        //Toma los datos de setDataMatrizMin para llenar la matriz
        setDataMatrizMin();
        // Se manda llamar la clase que realizará los cálculos de minimización por Simplex
        SimplexMin sm = new SimplexMin(matriz, ms, pivote, filas, columnas);
        // Se realizan los cálculos y se obtiene el String que se va a visualizar en el área de texto
        text = sm.calculate();
        // Se despliega el valor del String el el área de texto
        desplegar();
        
    }//GEN-LAST:event_btnMinimizacionActionPerformed

    private void cx20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cx20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cx20ActionPerformed

    private void btnMaximizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaximizacionActionPerformed
        
        //Toma los datos de SetDataMatrizMax para llenar la matriz
        setDataMatrizMax();
        // Se manda llamar la clase que realizará los cálculos de maximización por Simplex
        SimplexMax sm = new SimplexMax(matriz, pivote, filas, columnas);
        // Se realizan los cálculos y se obtiene el String que se va a visualizar en el área de texto
        text = sm.calculate();
        // Se despliega el valor del String el el área de texto
        desplegar();
        
    }//GEN-LAST:event_btnMaximizacionActionPerformed

    private void cx11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cx11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cx11ActionPerformed

    
    public void desplegar(){
        limpiar();
        area.append(text);
    }
    
    public void limpiar(){
        area.setText("");
    }
    
    
    public void setDataMatrizMin() {
        columnas = 9;
        filas = 3;
        matriz = new float[filas][columnas];
        ms = new MsSimplexMin[columnas];
        
        matriz[0][0] = Float.parseFloat(cx00.getText());
        matriz[0][1] = Float.parseFloat(cx01.getText());
        // Valores de las S
        matriz[0][2] = -1;
        matriz[0][3] = 0;
        matriz[0][4] = 0;
        // Valores de las A
        matriz[0][5] = 1;
        matriz[0][6] = 0;
        matriz[0][7] = 0;
        matriz[0][8] = Float.parseFloat(cx05.getText());
        
        matriz[1][0] = Float.parseFloat(cx10.getText());
        matriz[1][1] = Float.parseFloat(cx11.getText());
        // Valores de las S
        matriz[1][2] = 0;
        matriz[1][3] = -1;
        matriz[1][4] = 0;
        // Valores de las A
        matriz[1][5] = 0;
        matriz[1][6] = 1;
        matriz[1][7] = 0;
        matriz[1][8] = Float.parseFloat(cx15.getText());
        
        matriz[2][0] = Float.parseFloat(cx20.getText());
        matriz[2][1] = Float.parseFloat(cx21.getText());
        // Valores de las S
        matriz[2][2] = 0;
        matriz[2][3] = 0;
        matriz[2][4] = -1;
        // Valores de las A
        matriz[2][5] = 0;
        matriz[2][6] = 0;
        matriz[2][7] = 1;
        matriz[2][8] = Float.parseFloat(cx25.getText());
        
        // Se suman los valores de la columna para las Ms
        // Y se toma los valores negativos de la función objetivo
        ms[0] = new MsSimplexMin(matriz[0][0]+matriz[1][0]+matriz[2][0], Float.parseFloat(cx30.getText())*-1);
        ms[1] = new MsSimplexMin(matriz[0][1]+matriz[1][1]+matriz[2][1], Float.parseFloat(cx31.getText())*-1);
        // Se le da el valor negativo a las Ms de las Ss
        ms[2] = new MsSimplexMin(-1, 0);
        ms[3] = new MsSimplexMin(-1, 0);
        ms[4] = new MsSimplexMin(-1, 0);
        // Las Ms de las As tomarán el valor de 0
        ms[5] = new MsSimplexMin(0, 0);
        ms[6] = new MsSimplexMin(0, 0);
        ms[7] = new MsSimplexMin(0, 0);
         // Se suman los valores de la columna de las Constantes
        ms[8] = new MsSimplexMin(matriz[0][8]+matriz[1][8]+matriz[2][8], 0);
        
    }
    
    
    public void setDataMatrizMax(){
        filas=4;
        columnas=6;
        matriz = new float[filas][columnas];
        
        matriz[0][0] = Float.parseFloat(cx00.getText());
        matriz[0][1] = Float.parseFloat(cx01.getText());
        matriz[0][2] = 1;
        matriz[0][3] = 0;
        matriz[0][4] = 0;
        matriz[0][5] = Float.parseFloat(cx05.getText());
        
        matriz[1][0] = Float.parseFloat(cx10.getText());
        matriz[1][1] = Float.parseFloat(cx11.getText());
        matriz[1][2] = 0;
        matriz[1][3] = 1;
        matriz[1][4] = 0;
        matriz[1][5] = Float.parseFloat(cx15.getText());
        
        matriz[2][0] = Float.parseFloat(cx20.getText());
        matriz[2][1] = Float.parseFloat(cx21.getText());
        matriz[2][2] = 0;
        matriz[2][3] = 0;
        matriz[2][4] = 1;
        matriz[2][5] = Float.parseFloat(cx25.getText());
        
        matriz[3][0] = Float.parseFloat(cx30.getText()) * -1;
        matriz[3][1] = Float.parseFloat(cx31.getText()) * -1;
        matriz[3][2] = 0;
        matriz[3][3] = 0;
        matriz[3][4] = 0;
        matriz[3][5] = 0;
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simplex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simplex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simplex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simplex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simplex().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JButton btnMaximizacion;
    private javax.swing.JButton btnMinimizacion;
    private javax.swing.JTextField cx00;
    private javax.swing.JTextField cx01;
    private javax.swing.JTextField cx05;
    private javax.swing.JTextField cx10;
    private javax.swing.JTextField cx11;
    private javax.swing.JTextField cx15;
    private javax.swing.JTextField cx20;
    private javax.swing.JTextField cx21;
    private javax.swing.JTextField cx25;
    private javax.swing.JTextField cx30;
    private javax.swing.JTextField cx31;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
